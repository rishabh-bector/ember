warning: unused import: `monitor::VideoMode`
  --> engine/src/lib.rs:29:5
   |
29 |     monitor::VideoMode,
   |     ^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `LocalReporterSystem`, `RENDER_UI_SYSTEM_ID`, `systems::ui::*`
  --> engine/src/renderer/graph/mod.rs:9:42
   |
9  |     constants::{ID, METRICS_UI_IMGUI_ID, RENDER_UI_SYSTEM_ID},
   |                                          ^^^^^^^^^^^^^^^^^^^
10 |     renderer::{graph::target::DepthBuffer, systems::ui::*, SCREEN_SIZE},
   |                                            ^^^^^^^^^^^^^^
...
14 |         schedule::{LocalReporterSystem, StatelessSystem, SubSchedule},
   |                    ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `IntoQuery`, `world::SubWorld`
 --> engine/src/renderer/systems/channel.rs:1:14
  |
1 | use legion::{world::SubWorld, IntoQuery};
  |              ^^^^^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `IntoParallelRefMutIterator`
 --> engine/src/renderer/systems/channel.rs:2:19
  |
2 | use rayon::iter::{IntoParallelRefMutIterator, ParallelIterator};
  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `RwLock`
 --> engine/src/renderer/systems/channel.rs:4:17
  |
4 |     sync::{Arc, RwLock},
  |                 ^^^^^^

warning: unused imports: `CAMERA_2D_BIND_GROUP_ID`, `FrameMetrics`, `GroupState`, `InstanceBuffer`, `InstanceGroupBinder`, `InstanceGroup`, `Instance`, `LIGHTING_2D_BIND_GROUP_ID`, `Position2D`, `QUAD_BIND_GROUP_ID`, `RENDER_2D_COMMON_TEXTURE_ID`, `UniformGroupBuilder`, `UniformGroupType`, `UniformGroup`, `WindowSize`, `generic::GenericUniformBuilder`, `mesh::Mesh`, `registry::MeshRegistry`
  --> engine/src/renderer/systems/channel.rs:9:18
   |
9  |     components::{FrameMetrics, Position2D},
   |                  ^^^^^^^^^^^^  ^^^^^^^^^^
10 |     constants::{
11 |         CAMERA_2D_BIND_GROUP_ID, CAMERA_3D_BIND_GROUP_ID, ID, LIGHTING_2D_BIND_GROUP_ID,
   |         ^^^^^^^^^^^^^^^^^^^^^^^                               ^^^^^^^^^^^^^^^^^^^^^^^^^
12 |         QUAD_BIND_GROUP_ID, RENDER_2D_COMMON_TEXTURE_ID,
   |         ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
15 |         buffer::instance::{Instance, InstanceBuffer, InstanceGroup, InstanceGroupBinder},
   |                            ^^^^^^^^  ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^
16 |         graph::NodeState,
17 |         mesh::Mesh,
   |         ^^^^^^^^^^
...
20 |             generic::GenericUniformBuilder,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
21 |             group::{GroupState, UniformGroup, UniformGroupBuilder, UniformGroupType},
   |                     ^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^
...
24 |     sources::{registry::MeshRegistry, WindowSize},
   |               ^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `IntoQuery`, `world::SubWorld`
 --> engine/src/renderer/systems/quad.rs:1:14
  |
1 | use legion::{world::SubWorld, IntoQuery};
  |              ^^^^^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `IntoParallelRefMutIterator`
 --> engine/src/renderer/systems/quad.rs:2:19
  |
2 | use rayon::iter::{IntoParallelRefMutIterator, ParallelIterator};
  |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `CAMERA_2D_BIND_GROUP_ID`, `LIGHTING_2D_BIND_GROUP_ID`, `Position2D`, `RENDER_2D_COMMON_TEXTURE_ID`, `registry::MeshRegistry`
  --> engine/src/renderer/systems/quad.rs:9:32
   |
9  |     components::{FrameMetrics, Position2D},
   |                                ^^^^^^^^^^
10 |     constants::{
11 |         CAMERA_2D_BIND_GROUP_ID, CAMERA_3D_BIND_GROUP_ID, ID, LIGHTING_2D_BIND_GROUP_ID,
   |         ^^^^^^^^^^^^^^^^^^^^^^^                               ^^^^^^^^^^^^^^^^^^^^^^^^^
12 |         QUAD_BIND_GROUP_ID, RENDER_2D_COMMON_TEXTURE_ID,
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
23 |     sources::{registry::MeshRegistry, WindowSize},
   |               ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `matrix2array_3d`
  --> engine/src/renderer/systems/render_3d/forward_basic.rs:26:26
   |
26 |     systems::camera_3d::{matrix2array_3d, matrix2array_4d},
   |                          ^^^^^^^^^^^^^^^

warning: unused import: `IntoParallelIterator`
 --> engine/src/systems/particle_2d.rs:5:30
  |
5 |     IndexedParallelIterator, IntoParallelIterator, IntoParallelRefMutIterator, ParallelIterator,
  |                              ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Arc`, `Mutex`
 --> engine/src/systems/physics_2d.rs:1:17
  |
1 | use std::sync::{Arc, Mutex};
  |                 ^^^  ^^^^^

warning: unused import: `renderer::GpuState`
 --> engine/src/systems/physics_2d.rs:5:5
  |
5 |     renderer::GpuState,
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `ParallelIterator`
 --> engine/src/renderer/systems/channel.rs:2:47
  |
2 | use rayon::iter::{IntoParallelRefMutIterator, ParallelIterator};
  |                                               ^^^^^^^^^^^^^^^^

warning: unused import: `ParallelIterator`
 --> engine/src/renderer/systems/quad.rs:2:47
  |
2 | use rayon::iter::{IntoParallelRefMutIterator, ParallelIterator};
  |                                               ^^^^^^^^^^^^^^^^

warning: unused import: `Rotation3`
 --> engine/src/renderer/systems/render_3d/forward_basic.rs:1:22
  |
1 | use cgmath::{Matrix, Rotation3, SquareMatrix};
  |                      ^^^^^^^^^

warning: unreachable pattern
   --> engine/src/renderer/graph/mod.rs:254:13
    |
254 |             _ => (debug!("ui is disabled")),
    |             ^
    |
    = note: `#[warn(unreachable_patterns)]` on by default

warning: unused variable: `node_channel`
   --> engine/src/lib.rs:537:13
    |
537 |         let node_channel = build_node_channel(
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_node_channel`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `is_node_input`
   --> engine/src/renderer/graph/node.rs:204:33
    |
204 |             .map(|(opt_uniform, is_node_input)| match opt_uniform {
    |                                 ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_is_node_input`

warning: `ember` (lib) generated 19 warnings
    Finished dev [unoptimized + debuginfo] target(s) in 0.07s
     Running `target/debug/example4`
 WARN  ember > RUNNING EXPERIMENTAL ENGINE MODE: test_channel_node
 INFO  ember > building engine: test_channel_node
 INFO  ember > building gpu
 INFO  ember > INITIAL SCREEN_SIZE: 3840, 2160
 INFO  winit::platform_impl::platform::x11::window > Guessed window scale factor: 2.3958333333333335
 DEBUG winit::platform_impl::platform::x11::window > Calculated physical dimensions: 9200x5175
 WARN  gfx_backend_vulkan                          > Unable to find layer: VK_LAYER_KHRONOS_validation
 INFO  wgpu_core::instance                         > Adapter Vulkan AdapterInfo { name: "NVIDIA GeForce GTX 1650 with Max-Q Design", vendor: 4318, device: 8081, device_type: DiscreteGpu }
 WARN  wgpu_core::instance                         > The underlying API or device in use does not support enough features to be a fully compliant implementation of WebGPU. A subset of the features can still be used. If you are running this program on native and not in a browser and wish to limit the features you use to the supported subset, call Adapter::downlevel_properties or Device::downlevel_properties to get a listing of the features the current platform supports.
 DEBUG gfx_backend_vulkan::physical_device         > Supported extensions: ["VK_KHR_swapchain", "VK_EXT_display_control"]
 INFO  wgpu_core::command::allocator               > Starting on (internal) thread ThreadId(1)
 INFO  wgpu_core::device                           > creating swap chain SwapChainDescriptor { usage: RENDER_ATTACHMENT, format: Bgra8UnormSrgb, width: 9200, height: 5175, present_mode: Fifo }
 INFO  ember                                       > building registry
 DEBUG ember::renderer                             > device preferred texture format: Bgra8UnormSrgb
 DEBUG ember::sources::registry                    > building texture registry: 2 groups, 2 textures
 INFO  wgpu_core::device                           > Created texture Valid((0, 1, Vulkan)) with TextureDescriptor { label: None, size: Extent3d { width: 414, height: 720, depth_or_array_layers: 1 }, mip_level_count: 1, sample_count: 1, dimension: D2, format: Bgra8UnormSrgb, usage: COPY_DST | SAMPLED }
 DEBUG wgpu_core::device                           > Bind group Valid((0, 1, Vulkan)) TrackerSet {
    buffers: {},
    textures: {
        (
            0,
            1,
        ): TextureState {
            mips: [
                RangedStates {
                    ranges: [
                        (
                            0..1,
                            Unit {
                                first: None,
                                last: SAMPLED,
                            },
                        ),
                    ],
                },
            ],
            full: false,
        },
    },
    views: {
        (
            0,
            1,
        ): PhantomData,
    },
    bind_groups: {},
    samplers: {
        (
            0,
            1,
        ): PhantomData,
    },
    compute_pipes: {},
    render_pipes: {},
    bundles: {},
    query_sets: {},
}
 INFO  wgpu_core::device                           > Created texture Valid((1, 1, Vulkan)) with TextureDescriptor { label: None, size: Extent3d { width: 272, height: 300, depth_or_array_layers: 1 }, mip_level_count: 1, sample_count: 1, dimension: D2, format: Bgra8UnormSrgb, usage: COPY_DST | SAMPLED }
 DEBUG wgpu_core::device                           > Bind group Valid((1, 1, Vulkan)) TrackerSet {
    buffers: {},
    textures: {
        (
            1,
            1,
        ): TextureState {
            mips: [
                RangedStates {
                    ranges: [
                        (
                            0..1,
                            Unit {
                                first: None,
                                last: SAMPLED,
                            },
                        ),
                    ],
                },
            ],
            full: false,
        },
    },
    views: {
        (
            1,
            1,
        ): PhantomData,
    },
    bind_groups: {},
    samplers: {
        (
            1,
            1,
        ): PhantomData,
    },
    compute_pipes: {},
    render_pipes: {},
    bundles: {},
    query_sets: {},
}
 DEBUG ember::sources::registry                    > building mesh registry: 0 groups, 0 meshes
 INFO  ember                                       > building uniforms
 INFO  ember                                       > building render graph nodes
 INFO  ember                                       > scheduling systems
 INFO  ember                                       > building render graph
 DEBUG ember::renderer::graph                      > building render graph nodes
 DEBUG ember::renderer::graph::node                > building node: df86532d-e851-4d11-bf5c-17cfd7a94505
 DEBUG naga::front                                 > Resolving [1] = GlobalVariable([1]) : Value(Pointer { base: [4], class: Uniform })
 DEBUG naga::front                                 > Resolving [2] = GlobalVariable([2]) : Value(Pointer { base: [5], class: Uniform })
 DEBUG naga::front                                 > Resolving [3] = FunctionArgument(0) : Handle([8])
 DEBUG naga::front                                 > Resolving [4] = AccessIndex { base: [1], index: 0 } : Value(Pointer { base: [1], class: Uniform })
 DEBUG naga::front                                 > Resolving [5] = Load { pointer: [4] } : Handle([1])
 DEBUG naga::front                                 > Resolving [6] = AccessIndex { base: [3], index: 0 } : Handle([6])
 DEBUG naga::front                                 > Resolving [7] = Constant([1]) : Value(Scalar { kind: Float, width: 4 })
 DEBUG naga::front                                 > Resolving [8] = Compose { ty: [2], components: [[6], [7]] } : Handle([2])
 DEBUG naga::front                                 > Resolving [9] = Binary { op: Multiply, left: [5], right: [8] } : Value(Vector { size: Quad, kind: Float, width: 4 })
 DEBUG naga::front                                 > Resolving [10] = LocalVariable([1]) : Value(Pointer { base: [2], class: Function })
 DEBUG naga::front                                 > Resolving [11] = AccessIndex { base: [2], index: 1 } : Value(Pointer { base: [1], class: Uniform })
 DEBUG naga::front                                 > Resolving [12] = Load { pointer: [11] } : Handle([1])
 DEBUG naga::front                                 > Resolving [13] = Load { pointer: [10] } : Handle([2])
 DEBUG naga::front                                 > Resolving [14] = Binary { op: Multiply, left: [12], right: [13] } : Value(Vector { size: Quad, kind: Float, width: 4 })
 DEBUG naga::front                                 > Resolving [15] = LocalVariable([2]) : Value(Pointer { base: [2], class: Function })
 DEBUG naga::front                                 > Resolving [16] = AccessIndex { base: [1], index: 1 } : Value(Pointer { base: [1], class: Uniform })
 DEBUG naga::front                                 > Resolving [17] = AccessIndex { base: [16], index: 0 } : Value(ValuePointer { size: Some(Quad), kind: Float, width: 4, class: Uniform })
 DEBUG naga::front                                 > Resolving [18] = Load { pointer: [17] } : Value(Vector { size: Quad, kind: Float, width: 4 })
 DEBUG naga::front                                 > Resolving [19] = Swizzle { size: Tri, vector: [18], pattern: [X, Y, Z, X] } : Value(Vector { size: Tri, kind: Float, width: 4 })
 DEBUG naga::front                                 > Resolving [20] = AccessIndex { base: [1], index: 1 } : Value(Pointer { base: [1], class: Uniform })
 DEBUG naga::front                                 > Resolving [21] = AccessIndex { base: [20], index: 1 } : Value(ValuePointer { size: Some(Quad), kind: Float, width: 4, class: Uniform })
 DEBUG naga::front                                 > Resolving [22] = Load { pointer: [21] } : Value(Vector { size: Quad, kind: Float, width: 4 })
 DEBUG naga::front                                 > Resolving [23] = Swizzle { size: Tri, vector: [22], pattern: [X, Y, Z, X] } : Value(Vector { size: Tri, kind: Float, width: 4 })
 DEBUG naga::front                                 > Resolving [24] = AccessIndex { base: [1], index: 1 } : Value(Pointer { base: [1], class: Uniform })
 DEBUG naga::front                                 > Resolving [25] = AccessIndex { base: [24], index: 2 } : Value(ValuePointer { size: Some(Quad), kind: Float, width: 4, class: Uniform })
 DEBUG naga::front                                 > Resolving [26] = Load { pointer: [25] } : Value(Vector { size: Quad, kind: Float, width: 4 })
 DEBUG naga::front                                 > Resolving [27] = Swizzle { size: Tri, vector: [26], pattern: [X, Y, Z, X] } : Value(Vector { size: Tri, kind: Float, width: 4 })
 DEBUG naga::front                                 > Resolving [28] = Compose { ty: [10], components: [[19], [23], [27]] } : Handle([10])
 DEBUG naga::front                                 > Resolving [29] = LocalVariable([3]) : Value(Pointer { base: [9], class: Function })
 DEBUG naga::front                                 > Resolving [30] = AccessIndex { base: [29], index: 1 } : Value(Pointer { base: [7], class: Function })
 DEBUG naga::front                                 > Resolving [31] = AccessIndex { base: [3], index: 1 } : Handle([7])
 DEBUG naga::front                                 > Resolving [32] = AccessIndex { base: [29], index: 0 } : Value(Pointer { base: [2], class: Function })
 DEBUG naga::front                                 > Resolving [33] = Load { pointer: [15] } : Handle([2])
 DEBUG naga::front                                 > Resolving [34] = AccessIndex { base: [29], index: 2 } : Value(Pointer { base: [6], class: Function })
 DEBUG naga::front                                 > Resolving [35] = Load { pointer: [10] } : Handle([2])
 DEBUG naga::front                                 > Resolving [1] = GlobalVariable([4]) : Handle([12])
 DEBUG naga::front                                 > Resolving [2] = GlobalVariable([3]) : Handle([11])
 DEBUG naga::front                                 > Resolving [3] = GlobalVariable([1]) : Value(Pointer { base: [4], class: Uniform })
 DEBUG naga::front                                 > Resolving [4] = GlobalVariable([2]) : Value(Pointer { base: [5], class: Uniform })
 DEBUG naga::front                                 > Resolving [5] = FunctionArgument(0) : Handle([3])
 DEBUG naga::front                                 > Resolving [6] = FunctionArgument(1) : Handle([6])
 DEBUG naga::front                                 > Resolving [7] = FunctionArgument(2) : Handle([6])
 DEBUG naga::front                                 > Resolving [8] = FunctionArgument(3) : Handle([6])
 DEBUG naga::front                                 > Resolving [9] = FunctionArgument(4) : Handle([6])
 DEBUG naga::front                                 > Resolving [10] = Binary { op: Subtract, left: [7], right: [8] } : Handle([6])
 DEBUG naga::front                                 > Resolving [11] = Math { fun: Normalize, arg: [10], arg1: None, arg2: None } : Handle([6])
 DEBUG naga::front                                 > Resolving [12] = LocalVariable([1]) : Value(Pointer { base: [6], class: Function })
 DEBUG naga::front                                 > Resolving [13] = Load { pointer: [12] } : Handle([6])
 DEBUG naga::front                                 > Resolving [1] = GlobalVariable([4]) : Handle([12])
 DEBUG naga::front                                 > Resolving [2] = GlobalVariable([3]) : Handle([11])
 DEBUG naga::front                                 > Resolving [3] = GlobalVariable([1]) : Value(Pointer { base: [4], class: Uniform })
 DEBUG naga::front                                 > Resolving [4] = GlobalVariable([2]) : Value(Pointer { base: [5], class: Uniform })
 DEBUG naga::front                                 > Resolving [5] = FunctionArgument(0) : Handle([6])
 DEBUG naga::front                                 > Resolving [6] = FunctionArgument(1) : Handle([6])
 DEBUG naga::front                                 > Resolving [7] = FunctionArgument(2) : Handle([6])
 DEBUG naga::front                                 > Resolving [8] = FunctionArgument(3) : Handle([6])
 DEBUG naga::front                                 > Resolving [9] = FunctionArgument(4) : Handle([6])
 DEBUG naga::front                                 > Resolving [10] = Unary { op: Negate, expr: [5] } : Handle([6])
 DEBUG naga::front                                 > Resolving [11] = Call([1]) : Handle([3])
 DEBUG naga::front                                 > Resolving [12] = Binary { op: Multiply, left: [6], right: [11] } : Handle([6])
 DEBUG naga::front                                 > Resolving [13] = Constant([3]) : Value(Scalar { kind: Float, width: 4 })
 DEBUG naga::front                                 > Resolving [14] = Unary { op: Negate, expr: [5] } : Handle([6])
 DEBUG naga::front                                 > Resolving [15] = Call([2]) : Handle([3])
 DEBUG naga::front                                 > Resolving [16] = Binary { op: Multiply, left: [6], right: [15] } : Handle([6])
 DEBUG naga::valid::interface                      > var GlobalVariable { name: Some("render_3d_uniforms"), class: Uniform, binding: Some(ResourceBinding { group: 1, binding: 0 }), ty: [4], init: None, storage_access: (empty) }
 DEBUG naga::valid::interface                      > var GlobalVariable { name: Some("camera_uniforms"), class: Uniform, binding: Some(ResourceBinding { group: 2, binding: 0 }), ty: [5], init: None, storage_access: (empty) }
 DEBUG naga::valid::interface                      > var GlobalVariable { name: Some("texture0"), class: Handle, binding: Some(ResourceBinding { group: 0, binding: 0 }), ty: [11], init: None, storage_access: (empty) }
 DEBUG naga::valid::interface                      > var GlobalVariable { name: Some("sampler0"), class: Handle, binding: Some(ResourceBinding { group: 0, binding: 1 }), ty: [12], init: None, storage_access: (empty) }
 DEBUG naga::valid::function                       > var LocalVariable { name: Some("view_dir"), ty: [6], init: None }
 DEBUG naga::valid::function                       > var LocalVariable { name: Some("world_space"), ty: [2], init: None }
 DEBUG naga::valid::function                       > var LocalVariable { name: Some("camera_space"), ty: [2], init: None }
 DEBUG naga::valid::function                       > var LocalVariable { name: Some("out"), ty: [9], init: None }
 DEBUG ember::renderer::uniform::group             > UniformGroupBuilder: building ember::renderer::systems::render_3d::forward_basic::Render3DForwardUniformGroup with 1 bind entries
 INFO  wgpu_core::device                           > Created buffer Valid((0, 1, Vulkan)) with BufferDescriptor { label: Some("Single Uniform Buffer: ember::renderer::systems::render_3d::forward_basic::Render3DUniforms"), size: 148, usage: COPY_DST | UNIFORM, mapped_at_creation: true }
 DEBUG wgpu_core::device                           > Buffer (0, 1, Vulkan) map state -> Idle
 DEBUG wgpu_core::device                           > Bind group Valid((2, 1, Vulkan)) TrackerSet {
    buffers: {
        (
            0,
            1,
        ): Unit {
            first: None,
            last: UNIFORM,
        },
    },
    textures: {},
    views: {},
    bind_groups: {},
    samplers: {},
    compute_pipes: {},
    render_pipes: {},
    bundles: {},
    query_sets: {},
}
 INFO  ember::renderer::uniform::group             > GSB: ember::renderer::systems::render_3d::forward_basic::Render3DForwardUniformGroup
 DEBUG ember::renderer::uniform::group             > UniformGroupBuilder: building ember::systems::camera_3d::Camera3DUniformGroup with 1 bind entries
 INFO  wgpu_core::device                           > Created buffer Valid((1, 1, Vulkan)) with BufferDescriptor { label: Some("Single Uniform Buffer: ember::systems::camera_3d::Camera3DUniforms"), size: 152, usage: COPY_DST | UNIFORM, mapped_at_creation: true }
 DEBUG wgpu_core::device                           > Buffer (1, 1, Vulkan) map state -> Idle
 DEBUG wgpu_core::device                           > Bind group Valid((3, 1, Vulkan)) TrackerSet {
    buffers: {
        (
            1,
            1,
        ): Unit {
            first: None,
            last: UNIFORM,
        },
    },
    textures: {},
    views: {},
    bind_groups: {},
    samplers: {},
    compute_pipes: {},
    render_pipes: {},
    bundles: {},
    query_sets: {},
}
 INFO  ember::renderer::uniform::group             > GSB: ember::systems::camera_3d::Camera3DUniformGroup
 DEBUG gfx_backend_vulkan::device                  > create_graphics_pipeline GraphicsPipelineDesc { label: Some("render_pipeline_render_3d_basic_node_builder"), primitive_assembler: Vertex { buffers: [VertexBufferDesc { binding: 0, stride: 32, rate: Vertex }], attributes: [AttributeDesc { location: 0, binding: 0, element: Element { format: Rgb32Sfloat, offset: 0 } }, AttributeDesc { location: 1, binding: 0, element: Element { format: Rg32Sfloat, offset: 12 } }, AttributeDesc { location: 2, binding: 0, element: Element { format: Rgb32Sfloat, offset: 20 } }], input_assembler: InputAssemblerDesc { primitive: TriangleList, with_adjacency: false, restart_index: None }, vertex: EntryPoint { entry: "main", module: ShaderModule { raw: 0x55a891d36ab8 }, specialization: Specialization { constants: [], data: [] } }, tessellation: None, geometry: None }, rasterizer: Rasterizer { polygon_mode: Fill, cull_face: BACK, front_face: CounterClockwise, depth_clamping: false, depth_bias: None, conservative: false, line_width: Static(1.0) }, fragment: Some(EntryPoint { entry: "main", module: ShaderModule { raw: 0x55a891d36ab8 }, specialization: Specialization { constants: [], data: [] } }), blender: BlendDesc { logic_op: None, targets: [ColorBlendDesc { mask: RED | GREEN | BLUE | ALPHA | COLOR | ALL, blend: Some(BlendState { color: Add { src: SrcAlpha, dst: OneMinusSrcAlpha }, alpha: Add { src: One, dst: OneMinusSrcAlpha } }) }] }, depth_stencil: DepthStencilDesc { depth: None, depth_bounds: false, stencil: None }, multisampling: None, baked_states: BakedStates { viewport: None, scissor: None, blend_constants: None, depth_bounds: None }, layout: PipelineLayout { raw: 0x55a891ebe628 }, subpass: Subpass { index: 0, main_pass: RenderPass { raw: 0x55a891eb15c8, attachment_count: 1 } }, flags: (empty), parent: None }
 DEBUG ember::renderer::graph                      > creating render graph node_targets
 INFO  ember::renderer::graph                      > SCREEN_SIZE AT TARGET BUILD: 3840, 2160
 DEBUG ember::renderer::graph                      > building node states
 DEBUG ember::sources::ui                          > building ui
 INFO  naga::front::spv                            > Generated by 851976 version 10000
 DEBUG naga::front::spv                            > 	Capability [2]
 DEBUG naga::front::spv                            > 	ExtInstImport [6]
 DEBUG naga::front::spv                            > 	MemoryModel [3]
 DEBUG naga::front::spv                            > 	EntryPoint [11]
 DEBUG naga::front::spv                            > 	Decorate [4]
 DEBUG naga::front::spv                            > 	Decorate [4]
 DEBUG naga::front::spv                            > 	Decorate [4]
 DEBUG naga::front::spv                            > 	Decorate [4]
 DEBUG naga::front::spv                            > 	MemberDecorate [5]
 DEBUG naga::front::spv                            > 	MemberDecorate [5]
 DEBUG naga::front::spv                            > 	MemberDecorate [5]
 DEBUG naga::front::spv                            > 	MemberDecorate [5]
 DEBUG naga::front::spv                            > 	Decorate [3]
 DEBUG naga::front::spv                            > 	MemberDecorate [4]
 DEBUG naga::front::spv                            > 	MemberDecorate [5]
 DEBUG naga::front::spv                            > 	MemberDecorate [5]
 DEBUG naga::front::spv                            > 	Decorate [3]
 DEBUG naga::front::spv                            > 	Decorate [4]
 DEBUG naga::front::spv                            > 	Decorate [4]
 DEBUG naga::front::spv                            > 	Decorate [4]
 DEBUG naga::front::spv                            > 	TypeVoid [2]
 DEBUG naga::front::spv                            > 	TypeFunction [3]
 DEBUG naga::front::spv                            > 	TypeFloat [3]
 DEBUG naga::front::spv                            > 	TypeVector [4]
 DEBUG naga::front::spv                            > 	TypePointer [4]
 DEBUG naga::front::spv                            > 	Variable [4]
 DEBUG naga::front::spv                            > 	TypePointer [4]
 DEBUG naga::front::spv                            > 	Variable [4]
 DEBUG naga::front::spv                            > 	TypeVector [4]
 DEBUG naga::front::spv                            > 	TypePointer [4]
 DEBUG naga::front::spv                            > 	Variable [4]
 DEBUG naga::front::spv                            > 	TypePointer [4]
 DEBUG naga::front::spv                            > 	Variable [4]
 DEBUG naga::front::spv                            > 	TypeInt [4]
 DEBUG naga::front::spv                            > 	Constant [4]
 DEBUG naga::front::spv                            > 	TypeArray [4]
 DEBUG naga::front::spv                            > 	TypeStruct [6]
 DEBUG naga::front::spv                            > 	TypePointer [4]
 DEBUG naga::front::spv                            > 	Variable [4]
 DEBUG naga::front::spv                            > 	TypeInt [4]
 DEBUG naga::front::spv                            > 	Constant [4]
 DEBUG naga::front::spv                            > 	TypeMatrix [4]
 DEBUG naga::front::spv                            > 	TypeStruct [3]
 DEBUG naga::front::spv                            > 	TypePointer [4]
 DEBUG naga::front::spv                            > 	Variable [4]
 DEBUG naga::front::spv                            > 	TypePointer [4]
 DEBUG naga::front::spv                            > 	Variable [4]
 DEBUG naga::front::spv                            > 	Constant [4]
 DEBUG naga::front::spv                            > 	Constant [4]
 DEBUG naga::front::spv                            > 	Function [5]
 DEBUG naga::front::spv::function                  > Label
 DEBUG naga::front::spv                            > 		Load [4]
 DEBUG naga::front::spv                            > 		Store [3]
 DEBUG naga::front::spv                            > 		Load [4]
 DEBUG naga::front::spv                            > 		Store [3]
 DEBUG naga::front::spv                            > 		AccessChain [5]
 DEBUG naga::front::spv                            > 		Load [4]
 DEBUG naga::front::spv                            > 		Load [4]
 DEBUG naga::front::spv                            > 		CompositeExtract [5]
 DEBUG naga::front::spv                            > 		CompositeExtract [5]
 DEBUG naga::front::spv                            > 		CompositeConstruct [7]
 DEBUG naga::front::spv                            > 		MatrixTimesVector [5]
 DEBUG naga::front::spv                            > 		AccessChain [5]
 DEBUG naga::front::spv                            > 		Store [3]
 DEBUG naga::front::spv                            > 		Return [1]
 DEBUG naga::front::spv::function                  > FunctionEnd
 INFO  naga::front::spv                            > Patching...
 DEBUG naga::valid::interface                      > var GlobalVariable { name: None, class: Private, binding: None, ty: [2], init: None, storage_access: (empty) }
 DEBUG naga::valid::interface                      > var GlobalVariable { name: None, class: Private, binding: None, ty: [2], init: None, storage_access: (empty) }
 DEBUG naga::valid::interface                      > var GlobalVariable { name: None, class: Private, binding: None, ty: [5], init: None, storage_access: (empty) }
 DEBUG naga::valid::interface                      > var GlobalVariable { name: None, class: Private, binding: None, ty: [5], init: None, storage_access: (empty) }
 DEBUG naga::valid::interface                      > var GlobalVariable { name: None, class: Private, binding: None, ty: [10], init: Some([10]), storage_access: (empty) }
 DEBUG naga::valid::interface                      > var GlobalVariable { name: None, class: Uniform, binding: Some(ResourceBinding { group: 0, binding: 0 }), ty: [14], init: None, storage_access: (empty) }
 DEBUG naga::valid::interface                      > var GlobalVariable { name: None, class: Private, binding: None, ty: [2], init: None, storage_access: (empty) }
 ERROR wgpu_core::validation                       > Unexpected varying type: Array { base: [1], size: Constant([5]), stride: 4 }
 ERROR wgpu_core::validation                       > Unexpected varying type: Array { base: [1], size: Constant([5]), stride: 4 }
 INFO  naga::front::spv                            > Generated by 851976 version 10000
 DEBUG naga::front::spv                            > 	Capability [2]
 DEBUG naga::front::spv                            > 	ExtInstImport [6]
 DEBUG naga::front::spv                            > 	MemoryModel [3]
 DEBUG naga::front::spv                            > 	EntryPoint [8]
 DEBUG naga::front::spv                            > 	ExecutionMode [3]
 DEBUG naga::front::spv                            > 	Decorate [4]
 DEBUG naga::front::spv                            > 	Decorate [4]
 DEBUG naga::front::spv                            > 	Decorate [4]
 DEBUG naga::front::spv                            > 	Decorate [4]
 DEBUG naga::front::spv                            > 	Decorate [4]
 DEBUG naga::front::spv                            > 	Decorate [4]
 DEBUG naga::front::spv                            > 	Decorate [4]
 DEBUG naga::front::spv                            > 	TypeVoid [2]
 DEBUG naga::front::spv                            > 	TypeFunction [3]
 DEBUG naga::front::spv                            > 	TypeFloat [3]
 DEBUG naga::front::spv                            > 	TypeVector [4]
 DEBUG naga::front::spv                            > 	TypeVector [4]
 DEBUG naga::front::spv                            > 	Constant [4]
 DEBUG naga::front::spv                            > 	Constant [4]
 DEBUG naga::front::spv                            > 	Constant [4]
 DEBUG naga::front::spv                            > 	ConstantComposite [6]
 DEBUG naga::front::spv                            > 	TypePointer [4]
 DEBUG naga::front::spv                            > 	Variable [4]
 DEBUG naga::front::spv                            > 	TypePointer [4]
 DEBUG naga::front::spv                            > 	Variable [4]
 DEBUG naga::front::spv                            > 	TypeImage [9]
 DEBUG naga::front::spv                            > 	TypePointer [4]
 DEBUG naga::front::spv                            > 	Variable [4]
 DEBUG naga::front::spv                            > 		tracking [3] for sampling properties
 DEBUG naga::front::spv                            > 	TypeSampler [2]
 DEBUG naga::front::spv                            > 	TypePointer [4]
 DEBUG naga::front::spv                            > 	Variable [4]
 DEBUG naga::front::spv                            > 		tracking [4] for sampling properties
 DEBUG naga::front::spv                            > 	TypeSampledImage [3]
 DEBUG naga::front::spv                            > 	TypeVector [4]
 DEBUG naga::front::spv                            > 	TypePointer [4]
 DEBUG naga::front::spv                            > 	Variable [4]
 DEBUG naga::front::spv                            > 	ConstantComposite [6]
 DEBUG naga::front::spv                            > 	ConstantComposite [6]
 DEBUG naga::front::spv                            > 	Constant [4]
 DEBUG naga::front::spv                            > 	ConstantComposite [6]
 DEBUG naga::front::spv                            > 	Constant [4]
 DEBUG naga::front::spv                            > 	ConstantComposite [6]
 DEBUG naga::front::spv                            > 	Function [5]
 DEBUG naga::front::spv::function                  > Label
 DEBUG naga::front::spv                            > 		Load [4]
 DEBUG naga::front::spv                            > 		VectorShuffle [8]
 DEBUG naga::front::spv                            > 		FSub [5]
 DEBUG naga::front::spv                            > 		ExtInst [6]
 DEBUG naga::front::spv                            > 		FMul [5]
 DEBUG naga::front::spv                            > 		FAdd [5]
 DEBUG naga::front::spv                            > 		FMul [5]
 DEBUG naga::front::spv                            > 		ExtInst [7]
 DEBUG naga::front::spv                            > 		ExtInst [8]
 DEBUG naga::front::spv                            > 		CompositeExtract [5]
 DEBUG naga::front::spv                            > 		CompositeExtract [5]
 DEBUG naga::front::spv                            > 		CompositeExtract [5]
 DEBUG naga::front::spv                            > 		CompositeExtract [5]
 DEBUG naga::front::spv                            > 		CompositeConstruct [7]
 DEBUG naga::front::spv                            > 		Load [4]
 DEBUG naga::front::spv                            > 		Load [4]
 DEBUG naga::front::spv                            > 		SampledImage [5]
 DEBUG naga::front::spv                            > 		Load [4]
 DEBUG naga::front::spv                            > 		ImageSampleImplicitLod [5]
 DEBUG naga::front::spv::image                     > 			Image [3] sampled with [4] under SamplingOptions { project: false, compare: false }
 DEBUG naga::front::spv                            > 		FMul [5]
 DEBUG naga::front::spv                            > 		Store [3]
 DEBUG naga::front::spv                            > 		Return [1]
 DEBUG naga::front::spv::function                  > FunctionEnd
 INFO  naga::front::spv                            > Patching...
 DEBUG naga::valid::interface                      > var GlobalVariable { name: None, class: Private, binding: None, ty: [2], init: None, storage_access: (empty) }
 DEBUG naga::valid::interface                      > var GlobalVariable { name: None, class: Private, binding: None, ty: [2], init: None, storage_access: (empty) }
 DEBUG naga::valid::interface                      > var GlobalVariable { name: None, class: Handle, binding: Some(ResourceBinding { group: 1, binding: 0 }), ty: [7], init: None, storage_access: (empty) }
 DEBUG naga::valid::interface                      > var GlobalVariable { name: None, class: Handle, binding: Some(ResourceBinding { group: 1, binding: 1 }), ty: [8], init: None, storage_access: (empty) }
 DEBUG naga::valid::interface                      > var GlobalVariable { name: None, class: Private, binding: None, ty: [9], init: None, storage_access: (empty) }
 INFO  wgpu_core::device                           > Created buffer Valid((2, 1, Vulkan)) with BufferDescriptor { label: Some("imgui-wgpu uniform buffer"), size: 64, usage: COPY_DST | UNIFORM, mapped_at_creation: false }
 DEBUG wgpu_core::device                           > Bind group Valid((4, 1, Vulkan)) TrackerSet {
    buffers: {
        (
            2,
            1,
        ): Unit {
            first: None,
            last: UNIFORM,
        },
    },
    textures: {},
    views: {},
    bind_groups: {},
    samplers: {},
    compute_pipes: {},
    render_pipes: {},
    bundles: {},
    query_sets: {},
}
 DEBUG gfx_backend_vulkan::device                  > create_graphics_pipeline GraphicsPipelineDesc { label: Some("imgui-wgpu pipeline"), primitive_assembler: Vertex { buffers: [VertexBufferDesc { binding: 0, stride: 20, rate: Vertex }], attributes: [AttributeDesc { location: 0, binding: 0, element: Element { format: Rg32Sfloat, offset: 0 } }, AttributeDesc { location: 1, binding: 0, element: Element { format: Rg32Sfloat, offset: 8 } }, AttributeDesc { location: 2, binding: 0, element: Element { format: Rgba8Unorm, offset: 16 } }], input_assembler: InputAssemblerDesc { primitive: TriangleList, with_adjacency: false, restart_index: None }, vertex: EntryPoint { entry: "main", module: ShaderModule { raw: 0x55a891edc368 }, specialization: Specialization { constants: [], data: [] } }, tessellation: None, geometry: None }, rasterizer: Rasterizer { polygon_mode: Fill, cull_face: NONE, front_face: Clockwise, depth_clamping: false, depth_bias: None, conservative: false, line_width: Static(1.0) }, fragment: Some(EntryPoint { entry: "main", module: ShaderModule { raw: 0x55a891edc978 }, specialization: Specialization { constants: [], data: [] } }), blender: BlendDesc { logic_op: None, targets: [ColorBlendDesc { mask: RED | GREEN | BLUE | ALPHA | COLOR | ALL, blend: Some(BlendState { color: Add { src: SrcAlpha, dst: OneMinusSrcAlpha }, alpha: Add { src: OneMinusDstAlpha, dst: One } }) }] }, depth_stencil: DepthStencilDesc { depth: None, depth_bounds: false, stencil: None }, multisampling: None, baked_states: BakedStates { viewport: None, scissor: None, blend_constants: None, depth_bounds: None }, layout: PipelineLayout { raw: 0x55a891f41158 }, subpass: Subpass { index: 0, main_pass: RenderPass { raw: 0x55a891eb15c8, attachment_count: 1 } }, flags: (empty), parent: None }
 INFO  wgpu_core::device                           > Created texture Valid((2, 1, Vulkan)) with TextureDescriptor { label: Some("imgui-wgpu font atlas"), size: Extent3d { width: 512, height: 256, depth_or_array_layers: 1 }, mip_level_count: 1, sample_count: 1, dimension: D2, format: Bgra8UnormSrgb, usage: COPY_DST | SAMPLED }
 DEBUG wgpu_core::device                           > Bind group Valid((5, 1, Vulkan)) TrackerSet {
    buffers: {},
    textures: {
        (
            2,
            1,
        ): TextureState {
            mips: [
                RangedStates {
                    ranges: [
                        (
                            0..1,
                            Unit {
                                first: None,
                                last: SAMPLED,
                            },
                        ),
                    ],
                },
            ],
            full: false,
        },
    },
    views: {
        (
            2,
            1,
        ): PhantomData,
    },
    bind_groups: {},
    samplers: {
        (
            2,
            1,
        ): PhantomData,
    },
    compute_pipes: {},
    render_pipes: {},
    bundles: {},
    query_sets: {},
}
 DEBUG ember::renderer::graph                      > scheduling render systems
 DEBUG ember::renderer::graph                      > done building render graph!
 INFO  ember                                       > scheduling render graph
 INFO  ember                                       > ready to start!
 INFO  wgpu_core::device                           > Created buffer Valid((3, 1, Vulkan)) with BufferDescriptor { label: Some("2D Vertex Buffer: screen_quad"), size: 64, usage: VERTEX, mapped_at_creation: true }
 DEBUG wgpu_core::device                           > Buffer (3, 1, Vulkan) map state -> Idle
 INFO  wgpu_core::device                           > Created buffer Valid((4, 1, Vulkan)) with BufferDescriptor { label: Some("Index Buffer"), size: 24, usage: INDEX, mapped_at_creation: true }
 DEBUG wgpu_core::device                           > Buffer (4, 1, Vulkan) map state -> Idle
 INFO  ember                                       > starting engine
 DEBUG ember                                       > executing all systems
 DEBUG ember::renderer::systems::render_3d::forward_basic > running system render_3d_forward_basic_uniform_loader (graph node)
 DEBUG ember::renderer::systems::graph                    > running system begin_render_graph
 DEBUG ember::renderer::systems::render_3d::forward_basic > allocating buffers for new render_3d component: test_cube
 DEBUG ember::renderer::uniform::group                    > GroupStateBuilder: new state ember::renderer::systems::render_3d::forward_basic::Render3DForwardUniformGroup with 1 bind entries
 INFO  wgpu_core::device                                  > Created buffer Valid((5, 1, Vulkan)) with BufferDescriptor { label: Some("Single Uniform Buffer: ember::renderer::systems::render_3d::forward_basic::Render3DUniforms"), size: 148, usage: COPY_DST | UNIFORM, mapped_at_creation: true }
 DEBUG wgpu_core::device                                  > Buffer (5, 1, Vulkan) map state -> Idle
 DEBUG wgpu_core::device                                  > Bind group Valid((6, 1, Vulkan)) TrackerSet {
    buffers: {
        (
            5,
            1,
        ): Unit {
            first: None,
            last: UNIFORM,
        },
    },
    textures: {},
    views: {},
    bind_groups: {},
    samplers: {},
    compute_pipes: {},
    render_pipes: {},
    bundles: {},
    query_sets: {},
}
 DEBUG ember::renderer::systems::render_3d::forward_basic > running system render_3d_forward_basic (graph node)
 INFO  wgpu_core::command::allocator                      > Starting on thread ThreadId(2)
 DEBUG ember::renderer::graph::target                     > creating render pass: forward_render_3d, depth_buffer: false, clear: false
 DEBUG ember::renderer::systems::render_3d::forward_basic > done recording; submitting render pass
 DEBUG ember::renderer::systems::render_3d::forward_basic > forward_render_3d pass submitted
 DEBUG ember::renderer::systems::graph                    > running system end_render_graph
 DEBUG wgpu_core::swap_chain                              > Presented. End of Frame
 DEBUG ember                                              > executing all systems
 DEBUG ember::renderer::systems::graph                    > running system begin_render_graph
 DEBUG ember::renderer::systems::render_3d::forward_basic > running system render_3d_forward_basic_uniform_loader (graph node)
thread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: Outdated', engine/src/renderer/systems/graph.rs:16:69
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
 DEBUG ember::renderer::systems::render_3d::forward_basic > loading uniform group state for existing render_3d component: test_cube
 INFO  wgpu_core::hub                                     > Dropping Global
 DEBUG wgpu_core::device::life                            > Waiting for IDLE...
 DEBUG wgpu_core::device::life                            > ...Done
